{
	"info": {
		"_postman_id": "f860e5f8-4de6-4c39-ae8c-cbf7de89dbcc",
		"name": "Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29533952"
	},
	"item": [
		{
			"name": "Martial Art",
			"item": [
				{
					"name": "Create new martial art 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\": \"Boxing\",\r\n    \"ruleset\": \"Boxing ruleset\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new martial art 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\": \"Wrestling\",\r\n    \"ruleset\": \"Wrestling ruleset\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all martial arts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read specific martial art",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art/Boxing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art",
								"Boxing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all attributes of specific martial art",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('ruleset');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"Sambo Wrestling\",\r\n    \"ruleset\" : \"Sambo Wrestling ruleset\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art/Wrestling",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art",
								"Wrestling"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update one attribute of specific martial art",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ruleset\" : \"New Boxing ruleset\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art/Boxing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art",
								"Boxing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific martial art",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art/Sambo Wrestling",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art",
								"Sambo Wrestling"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all martial arts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response to have only one message as property\", function(){",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fighter",
			"item": [
				{
					"name": "Create new fighter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"rokanasc94@hotmail.com\",\r\n    \"password\" : \"Doom\",\r\n    \"age\" : 29,\r\n    \"full_name\" : \"Konstantinos Rokanas\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Tomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time; and all our yesterdays have lighted fools the way to dusty death. Out, out, brief candle! Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage,and then is heard no more. It is a tale told by an idiot, full of sound and fury, signifying nothing.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 78,\r\n    \"height\" : 174\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fighter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"arvinrahimi78@gmail.com\",\r\n    \"password\" : \"Arvin\",\r\n    \"age\" : 23,\r\n    \"full_name\" : \"Arvin Rahimi\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Friends, Romans, countrymen, lend me your ears; I come to bury Caesar, not to praise him. The evil that men do lives after them; The good is oft interred with their bones; So let it be with Caesar. The noble Brutus hath told you Caesar was ambitious: If it were so, it was a grievous fault, and grievously hath Caesar answer’d it. Here, under leave of Brutus and the rest–for Brutus is an honourable man; So are they all, all honourable men–come I to speak in Caesar’s funeral. He was my friend, faithful and just to me: but Brutus says he was ambitious; And Brutus is an honourable man. He hath brought many captives home to Rome whose ransoms did the general coffers fill: did this in Caesar seem ambitious? When that the poor have cried, Caesar hath wept: ambition should be made of sterner stuff: yet Brutus says he was ambitious; and Brutus is an honourable man. You all did see that on the Lupercal I thrice presented him a kingly crown, which he did thrice refuse: was this ambition? Yet Brutus says he was ambitious; and, sure, he is an honourable man. I speak not to disprove what Brutus spoke, but here I am to speak what I do know. You all did love him once, not without cause: what cause withholds you then, to mourn for him? O judgment! thou art fled to brutish beasts, and men have lost their reason. Bear with me; my heart is in the coffin there with Caesar, and I must pause till it come back to me.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 80,\r\n    \"height\" : 185,\r\n    \"martial_art\": [\"Kickboxing\", \"Muay Thai\", \"Brazilian Jiu Jitsu\", \"Wrestling\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all fighters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all fighters by location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/opponents/NYC",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"opponents",
								"NYC"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read specific fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJva2FuYXNjOTRAaG90bWFpbC5jb20iLCJpYXQiOjE2OTY4MTUxMTEsImV4cCI6MTY5NjgxNTEyMX0.4oiAi7REth5BTZ82_w3qDmlBL1cuYo666TM_1C4E3uA",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/arvinrahimi78@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"arvinrahimi78@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all attributes of fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('age');\r",
									"    pm.expect(responseData).to.have.property('full_name');\r",
									"    pm.expect(responseData).to.have.property('sex');\r",
									"    pm.expect(responseData).to.have.property('martial_art');\r",
									"    pm.expect(responseData).to.have.property('bio');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight');\r",
									"    pm.expect(responseData).to.have.property('height');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"dukenukem@gmail.com\",\r\n    \"password\" : \"Duke\",\r\n    \"age\" : 45,\r\n    \"full_name\" : \"Duke Nukem\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"It’s time to kick ass and chew bubble gum...and I’m all outta gum.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 95,\r\n    \"height\" : 190,\r\n    \"martial_art\": [\"Wrestling\", \"Boxing\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/arvinrahimi78@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"arvinrahimi78@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific attribute of fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\" : \"NYC\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new martial art 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"name\": \"Boxing\",\r\n    \"ruleset\": \"Boxing ruleset\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new martial art 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Brazilian Jiu Jitsu\",\r\n    \"ruleset\": \"Brazilian Jiu Jitsu ruleset\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add martial art by name 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('password');",
									"    pm.expect(responseData).to.have.property('age');",
									"    pm.expect(responseData).to.have.property('full_name');",
									"    pm.expect(responseData).to.have.property('sex');",
									"    pm.expect(responseData).to.have.property('bio');",
									"    pm.expect(responseData).to.have.property('location');",
									"    pm.expect(responseData).to.have.property('fight_history');",
									"    pm.expect(responseData).to.have.property('martial_art');",
									"    pm.expect(responseData).to.have.property('weight');",
									"    pm.expect(responseData).to.have.property('height');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Boxing\"\r\n}   "
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add martial art by name 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('password');",
									"    pm.expect(responseData).to.have.property('age');",
									"    pm.expect(responseData).to.have.property('full_name');",
									"    pm.expect(responseData).to.have.property('sex');",
									"    pm.expect(responseData).to.have.property('bio');",
									"    pm.expect(responseData).to.have.property('location');",
									"    pm.expect(responseData).to.have.property('fight_history');",
									"    pm.expect(responseData).to.have.property('martial_art');",
									"    pm.expect(responseData).to.have.property('weight');",
									"    pm.expect(responseData).to.have.property('height');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Brazilian Jiu Jitsu\"\r\n}   "
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all martial arts in fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific martial art in fighter by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/martial-art/Brazilian%20Jiu%20Jitsu",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"martial-art",
								"Brazilian%20Jiu%20Jitsu"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific martial art in fighter by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/martial-art/Boxing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"martial-art",
								"Boxing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all martial arts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response to have only one message as property\", function(){",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"message\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fight 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"11111\",\r\n    \"date\" : \"2023-10-17\",\r\n    \"winner\": \"rokanasc94@hotmail.com\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight_class\" : \"Middleweight\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"],\r\n    \"martial_art\": [\"Muay Thai\", \"Brazilian Jiu Jitsu\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fight 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"22222\",\r\n    \"date\" : \"2023-10-19\",\r\n    \"winner\": \"arvinrahimi78@gmail.com\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight_class\" : \"Heavyweight\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"],\r\n    \"martial_art\": [\"Kickboxing\", \"Wrestling\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fight by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('age');\r",
									"    pm.expect(responseData).to.have.property('full_name');\r",
									"    pm.expect(responseData).to.have.property('sex');\r",
									"    pm.expect(responseData).to.have.property('bio');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('fight_history');\r",
									"    pm.expect(responseData).to.have.property('date_history');\r",
									"    pm.expect(responseData).to.have.property('weight');\r",
									"    pm.expect(responseData).to.have.property('height');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"11111\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fight by id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('age');\r",
									"    pm.expect(responseData).to.have.property('full_name');\r",
									"    pm.expect(responseData).to.have.property('sex');\r",
									"    pm.expect(responseData).to.have.property('bio');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('fight_history');\r",
									"    pm.expect(responseData).to.have.property('date_history');\r",
									"    pm.expect(responseData).to.have.property('weight');\r",
									"    pm.expect(responseData).to.have.property('height');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"22222\"\r\n}   "
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all fights in fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific fight in fighter by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific fight in fighter by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight/22222",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight",
								"22222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all fights in fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all fights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new date 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"11111\",\r\n    \"date\" : \"2023-10-17\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new date 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"22222\",\r\n    \"date\" : \"2023-10-19\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add date by id 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('age');\r",
									"    pm.expect(responseData).to.have.property('full_name');\r",
									"    pm.expect(responseData).to.have.property('sex');\r",
									"    pm.expect(responseData).to.have.property('bio');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('fight_history');\r",
									"    pm.expect(responseData).to.have.property('date_history');\r",
									"    pm.expect(responseData).to.have.property('weight');\r",
									"    pm.expect(responseData).to.have.property('height');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"11111\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add date by id 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('password');\r",
									"    pm.expect(responseData).to.have.property('age');\r",
									"    pm.expect(responseData).to.have.property('full_name');\r",
									"    pm.expect(responseData).to.have.property('sex');\r",
									"    pm.expect(responseData).to.have.property('bio');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('fight_history');\r",
									"    pm.expect(responseData).to.have.property('date_history');\r",
									"    pm.expect(responseData).to.have.property('weight');\r",
									"    pm.expect(responseData).to.have.property('height');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"22222\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all dates in fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific date in fighter by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific date in fighter by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all dates in fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/rokanasc94@hotmail.com/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"rokanasc94@hotmail.com",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific fighter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fighter/dukenukem@gmail.com",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter",
								"dukenukem@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all fighters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Fight",
			"item": [
				{
					"name": "Create new fight 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"11111\",\r\n    \"date\" : \"2023-10-17\",\r\n    \"winner\": \"\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight_class\" : \"Middleweight\",\r\n    \"fighters\": [],\r\n    \"martial_art\": []\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fight 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"22222\",\r\n    \"date\" : \"2023-10-19\",\r\n    \"winner\": \"arvinrahimi78@gmail.com\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight_class\" : \"Heavyweight\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"],\r\n    \"martial_art\": [\"Kickboxing\", \"Wrestling\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all fights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read specific fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight/22222",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"22222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all attributes of specific fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('martial_art');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"33333\",\r\n    \"date\" : \"2033-10-19\",\r\n    \"winner\": \"rokanasc94@hotmail.com\",\r\n    \"location\" : \"Stockholm\",\r\n    \"weight_class\" : \"Middleweight\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"dukenukem@gmail.com\"],\r\n    \"martial_art\": [\"Boxing\", \"Brazilian Jiu Jitsu\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight/22222",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"22222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific attribute of fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\": \"Malmo\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fighter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"rokanasc94@hotmail.com\",\r\n    \"password\" : \"Doom\",\r\n    \"age\" : 29,\r\n    \"full_name\" : \"Konstantinos Rokanas\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Tomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time; and all our yesterdays have lighted fools the way to dusty death. Out, out, brief candle! Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage,and then is heard no more. It is a tale told by an idiot, full of sound and fury, signifying nothing.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 78,\r\n    \"height\" : 174,\r\n    \"martial_art\": [\"Kickboxing\", \"Muay Thai\", \"Brazilian Jiu Jitsu\", \"Wrestling\", \"Boxing\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fighter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"arvinrahimi78@gmail.com\",\r\n    \"password\" : \"Arvin\",\r\n    \"age\" : 23,\r\n    \"full_name\" : \"Arvin Rahimi\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Friends, Romans, countrymen, lend me your ears; I come to bury Caesar, not to praise him. The evil that men do lives after them; The good is oft interred with their bones; So let it be with Caesar. The noble Brutus hath told you Caesar was ambitious: If it were so, it was a grievous fault, and grievously hath Caesar answer’d it. Here, under leave of Brutus and the rest–for Brutus is an honourable man; So are they all, all honourable men–come I to speak in Caesar’s funeral. He was my friend, faithful and just to me: but Brutus says he was ambitious; And Brutus is an honourable man. He hath brought many captives home to Rome whose ransoms did the general coffers fill: did this in Caesar seem ambitious? When that the poor have cried, Caesar hath wept: ambition should be made of sterner stuff: yet Brutus says he was ambitious; and Brutus is an honourable man. You all did see that on the Lupercal I thrice presented him a kingly crown, which he did thrice refuse: was this ambition? Yet Brutus says he was ambitious; and, sure, he is an honourable man. I speak not to disprove what Brutus spoke, but here I am to speak what I do know. You all did love him once, not without cause: what cause withholds you then, to mourn for him? O judgment! thou art fled to brutish beasts, and men have lost their reason. Bear with me; my heart is in the coffin there with Caesar, and I must pause till it come back to me.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 80,\r\n    \"height\" : 185,\r\n    \"martial_art\": [\"Kickboxing\", \"Muay Thai\", \"Brazilian Jiu Jitsu\", \"Wrestling\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fighter by email 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"rokanasc94@hotmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight/11111/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"11111",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fighter by email 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"    pm.expect(responseData).to.have.property('weight_class');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"arvinrahimi78@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fight/11111/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"11111",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all fighters in fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fight/33333/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"33333",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get winner in fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fight/33333/fighter/winner",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"33333",
								"fighter",
								"winner"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all fighters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new martial art 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kickboxing\",\r\n    \"ruleset\": \"Kickboxing ruleset\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new martial art 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('ruleset');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Boxing\",\r\n    \"ruleset\": \"Boxing ruleset\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add martial art by name 1 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response to be json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"pm.test(\"Response to have all attributes\", function(){",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('date');",
									"    pm.expect(responseData).to.have.property('location');",
									"    pm.expect(responseData).to.have.property('weight_class');",
									"    pm.expect(responseData).to.have.property('winner');",
									"    pm.expect(responseData).to.have.property('fighters');",
									"    pm.expect(responseData).to.have.property('martial_art');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Kickboxing\"\r\n}   "
						},
						"url": {
							"raw": "http://localhost:3000/api/fight/11111/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"11111",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all martial arts in fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fight/11111/martial-art",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"11111",
								"martial-art"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific martial art in fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('ruleset');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/fight/33333/martial-art/Boxing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"33333",
								"martial-art",
								"Boxing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific martial art in fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\",function(){\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight/33333/martial-art/Boxing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"33333",
								"martial-art",
								"Boxing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a specific fight",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight/33333",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight",
								"33333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all fights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/fight",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fight"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Date",
			"item": [
				{
					"name": "Create new date 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"11111\",\r\n    \"date\" : \"2023-10-17\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"fighters\": [\"rokanasc94@hotmail.com\", \"arvinrahimi78@gmail.com\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new date 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"22222\",\r\n    \"date\" : \"2023-10-19\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"fighters\": []\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read all dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Response to be an array\",function(){\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read specific date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/date/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update all attributes of date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\" : \"33333\",\r\n    \"date\" : \"2033-10-17\",\r\n    \"location\" : \"Stockholm\",\r\n    \"fighters\": []\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date/11111",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"11111"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific attribute of date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function(){\r",
									"    pm.response.to.be.status(200);\r",
									"});\r",
									"pm.test(\"Response to be json\",function(){\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\" : \"Malmo\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date/22222",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"22222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fighter 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"rokanasc94@hotmail.com\",\r\n    \"password\" : \"Doom\",\r\n    \"age\" : 29,\r\n    \"full_name\" : \"Konstantinos Rokanas\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Tomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time; and all our yesterdays have lighted fools the way to dusty death. Out, out, brief candle! Life's but a walking shadow, a poor player, that struts and frets his hour upon the stage,and then is heard no more. It is a tale told by an idiot, full of sound and fury, signifying nothing.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 78,\r\n    \"height\" : 174,\r\n    \"martial_art\": [\"Kickboxing\", \"Muay Thai\", \"Brazilian Jiu Jitsu\", \"Wrestling\", \"Boxing\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new fighter 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('accessToken');\r",
									"\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"arvinrahimi78@gmail.com\",\r\n    \"password\" : \"Arvin\",\r\n    \"age\" : 23,\r\n    \"full_name\" : \"Arvin Rahimi\",\r\n    \"sex\" : \"M\",\r\n    \"bio\" : \"Friends, Romans, countrymen, lend me your ears; I come to bury Caesar, not to praise him. The evil that men do lives after them; The good is oft interred with their bones; So let it be with Caesar. The noble Brutus hath told you Caesar was ambitious: If it were so, it was a grievous fault, and grievously hath Caesar answer’d it. Here, under leave of Brutus and the rest–for Brutus is an honourable man; So are they all, all honourable men–come I to speak in Caesar’s funeral. He was my friend, faithful and just to me: but Brutus says he was ambitious; And Brutus is an honourable man. He hath brought many captives home to Rome whose ransoms did the general coffers fill: did this in Caesar seem ambitious? When that the poor have cried, Caesar hath wept: ambition should be made of sterner stuff: yet Brutus says he was ambitious; and Brutus is an honourable man. You all did see that on the Lupercal I thrice presented him a kingly crown, which he did thrice refuse: was this ambition? Yet Brutus says he was ambitious; and, sure, he is an honourable man. I speak not to disprove what Brutus spoke, but here I am to speak what I do know. You all did love him once, not without cause: what cause withholds you then, to mourn for him? O judgment! thou art fled to brutish beasts, and men have lost their reason. Bear with me; my heart is in the coffin there with Caesar, and I must pause till it come back to me.\",\r\n    \"location\" : \"Gothenburg\",\r\n    \"weight\" : 80,\r\n    \"height\" : 185,\r\n    \"martial_art\": [\"Kickboxing\", \"Muay Thai\", \"Brazilian Jiu Jitsu\", \"Wrestling\"]\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fighter by email 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"rokanasc94@hotmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date/22222/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"22222",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add fighter by email 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"  pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Response to be json\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Response to have all attributes\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData).to.have.property('id');\r",
									"    pm.expect(responseData).to.have.property('date');\r",
									"    pm.expect(responseData).to.have.property('fighters');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\" : \"arvinrahimi78@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "http://localhost:3000/api/date/22222/fighter",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"22222",
								"fighter"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete specific date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/date/22222",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date",
								"22222"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\",function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response to have only one message as property\", function(){\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.have.property(\"message\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/date",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"date"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}